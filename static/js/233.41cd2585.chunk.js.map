{"version":3,"file":"static/js/233.41cd2585.chunk.js","mappings":"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","sources":["components/BeneficiaryForm.tsx","components/Modal.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addBeneficiary, updateBeneficiary } from \"../store/slices/beneficiarySlice\";\r\nimport { Beneficiary, BeneficiaryFormProps, FormValues } from \"../types/beneficiaryTypes\";\r\nimport { RootState } from \"../store\";\r\nimport Modal from \"./Modal\";\r\nimport \"../styles/BeneficiaryForm.css\";\r\n\r\nconst BeneficiaryForm: React.FC<BeneficiaryFormProps> = ({ isEditMode }) => {\r\n  const { register, handleSubmit, setValue, getValues, formState: { errors } } = useForm<FormValues>({\r\n    defaultValues: {\r\n      name: \"\",\r\n      address: \"\",\r\n      country: \"\",\r\n      pincode: \"\",\r\n    },\r\n  });\r\n\r\n  const [showModal, setShowModal] = useState(false);\r\n  const countries = [\"USA\", \"Canada\", \"India\", \"Australia\", \"Germany\"];\r\n\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const { id } = useParams();\r\n  const { beneficiaries } = useSelector((state: RootState) => state.beneficiaries);\r\n\r\n  useEffect(() => {\r\n    if (isEditMode) {\r\n      const beneficiary = beneficiaries.find((b) => b.id === parseInt(id ?? \"\"));\r\n      if (beneficiary) {\r\n        setValue(\"name\", beneficiary.name);\r\n        setValue(\"address\", beneficiary.address);\r\n        setValue(\"country\", beneficiary.country);\r\n        setValue(\"pincode\", beneficiary.pincode);\r\n      }\r\n    }\r\n  }, [isEditMode, id, beneficiaries, setValue]);\r\n\r\n  const validateInput = (value: string) => {\r\n    const isNotEmpty = /\\S/.test(value);\r\n    return isNotEmpty || \"Field cannot be empty\";\r\n  };\r\n\r\n  const validatePincode = (value: string) => {\r\n    const isNumeric = /^\\d+$/.test(value);\r\n    const isNotEmpty = /\\S/.test(value);\r\n    if (!isNotEmpty) return \"Pincode cannot be empty\";\r\n    if (!isNumeric) return \"Pincode must be a number\";\r\n    const isValidLength = value.length >= 4 && value.length <= 6;\r\n    return isValidLength || \"Pincode must be between 4 and 6 digits\";\r\n  };\r\n\r\n  const handleConfirm = () => {\r\n    const data: Beneficiary = getValues();\r\n    const parsedId = id ? parseInt(id) : 0;\r\n    if (isEditMode) {\r\n      const { id: _id, ...rest } = data;\r\n      dispatch(updateBeneficiary({ id: parsedId, ...rest }));\r\n      navigate(\"/\", { state: { showEditFlash: true } });\r\n    } else {\r\n      dispatch(addBeneficiary(data));\r\n      navigate(\"/\", { state: { showAddFlash: true } });\r\n    }\r\n    setShowModal(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-container\">\r\n      <h2>{isEditMode ? \"Edit Beneficiary\" : \"Add Beneficiary\"}</h2>\r\n      <form onSubmit={handleSubmit(() => setShowModal(true))}>\r\n        <label>\r\n          Full Name:\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Please enter First Name\"\r\n            {...register(\"name\", {\r\n              required: \"Full Name is required\",\r\n              validate: validateInput,\r\n            })}\r\n            className={errors.name ? \"input-error\" : \"\"}\r\n          />\r\n          {errors.name && <p className=\"error\">{errors.name.message}</p>}\r\n        </label>\r\n        <label>\r\n          Address:\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Please enter Address\"\r\n            {...register(\"address\", {\r\n              required: \"Address is required\",\r\n              validate: validateInput,\r\n            })}\r\n            className={errors.name ? \"input-error\" : \"\"}\r\n          />\r\n          {errors.address && <p className=\"error\">{errors.address.message}</p>}\r\n        </label>\r\n        <label className=\"select-wrapper\">\r\n          Country:\r\n          <select\r\n            {...register(\"country\", { required: \"Country is required\" })}\r\n            className={errors.name ? \"input-error\" : \"\"}\r\n            style={{ fontSize: 14, color: \"grey\" }}\r\n          >\r\n            {!isEditMode && (\r\n              <option value=\"\" disabled>\r\n                Please select country\r\n              </option>\r\n            )}\r\n            {countries.map((country, index) => (\r\n              <option key={index} value={country}>\r\n                {country}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          {errors.country && <p className=\"error\">{errors.country.message}</p>}\r\n        </label>\r\n        <label>\r\n          PinCode:\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Please enter PinCode\"\r\n            {...register(\"pincode\", {\r\n              required: \"PinCode is required\",\r\n              validate: validatePincode,\r\n            })}\r\n            className={errors.name ? \"input-error\" : \"\"}\r\n          />\r\n          {errors.pincode && <p className=\"error\">{errors.pincode.message}</p>}\r\n        </label>\r\n        <button type=\"submit\">{isEditMode ? \"Save\" : \"Submit\"}</button>\r\n      </form>\r\n      {showModal && (\r\n        <Modal\r\n          message={`Are you sure you want to ${isEditMode ? \"update\" : \"add\"\r\n            } the beneficiary?`}\r\n          onConfirm={handleConfirm}\r\n          onCancel={() => setShowModal(false)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BeneficiaryForm;\r\n","import React from 'react';\r\nimport \"../styles/Modal.css\";\r\n\r\ninterface ModalProps {\r\n  message: string;\r\n  onConfirm: () => void;\r\n  onCancel: () => void;\r\n}\r\n\r\n\r\nconst Modal: React.FC<ModalProps> = ({ message, onConfirm, onCancel }) => {\r\n  return (\r\n    <div className=\"modal\">\r\n      <div className=\"modal-content\">\r\n        <p>{message}</p>\r\n        <div className=\"modal-actions\">\r\n          <button onClick={onConfirm}>Yes</button>\r\n          <button onClick={onCancel}>No</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Modal;\r\n"],"names":["_ref","isEditMode","register","handleSubmit","setValue","getValues","formState","errors","useForm","defaultValues","name","address","country","pincode","showModal","setShowModal","useState","navigate","useNavigate","dispatch","useDispatch","id","useParams","beneficiaries","useSelector","state","useEffect","beneficiary","find","b","parseInt","validateInput","value","test","_jsxs","className","children","_jsx","onSubmit","type","placeholder","required","validate","message","style","fontSize","color","disabled","map","index","isNumeric","length","Modal","concat","onConfirm","handleConfirm","data","parsedId","_id","rest","updateBeneficiary","showEditFlash","addBeneficiary","showAddFlash","onCancel","onClick"],"sourceRoot":""}